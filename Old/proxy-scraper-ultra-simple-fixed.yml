name: Proxy Scraper - Ultra Simple Fixed

on:
  schedule:
    - cron: '0 */6 * * *'
  workflow_dispatch:
    inputs:
      proxy_types:
        description: 'Proxy types: socks5,socks4,http or "all"'
        required: true
        default: 'all'
        type: string

jobs:
  scrape-proxies:
    runs-on: ubuntu-latest
    timeout-minutes: 90

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        pip install --upgrade pip
        pip install -r requirements.txt
      timeout-minutes: 5

    - name: Set proxy types
      id: types
      run: |
        INPUT="${{ github.event.inputs.proxy_types || 'all' }}"
        if [ "$INPUT" = "all" ]; then
          echo "types=socks5 socks4 http" >> $GITHUB_OUTPUT
        else
          echo "types=$(echo $INPUT | tr ',' ' ')" >> $GITHUB_OUTPUT
        fi

    - name: Run proxy scraper for each type
      run: |
        for type in ${{ steps.types.outputs.types }}; do
          echo "Processing $type proxies..."
          timeout 1800 python proxy_scraper.py --proxy-type "$type" || echo "Timeout for $type"
          if [ -f proxylist.jdproxies ]; then
            cp proxylist.jdproxies "proxylist-$type.jdproxies"
            echo "Saved proxylist-$type.jdproxies"
          fi
          sleep 10
        done

    - name: Create merge script and run (fixed quotes)
      run: |
        echo 'import json, glob' > merge.py
        echo 'proxies = []' >> merge.py
        echo 'for f in glob.glob("proxylist-*.jdproxies"):' >> merge.py
        echo '    with open(f) as file:' >> merge.py
        echo '        data = json.load(file)' >> merge.py
        echo '        proxies.extend(data.get("customProxyList", []))' >> merge.py
        echo 'seen, unique = set(), []' >> merge.py
        echo 'for proxy in proxies:' >> merge.py
        echo '    addr = proxy["proxy"]["address"]' >> merge.py
        echo '    port = proxy["proxy"]["port"]' >> merge.py
        echo '    key = addr + ":" + str(port)' >> merge.py
        echo '    if key not in seen:' >> merge.py
        echo '        seen.add(key)' >> merge.py
        echo '        unique.append(proxy)' >> merge.py
        echo 'unique.sort(key=lambda x: x.get("response_time", 999))' >> merge.py
        echo 'result = {"customProxyList": unique}' >> merge.py
        echo 'with open("proxylist.jdproxies", "w") as f:' >> merge.py
        echo '    json.dump(result, f, indent=2)' >> merge.py
        echo 'print("Combined", len(unique), "unique proxies from", len(proxies), "total")' >> merge.py

        python merge.py
        rm merge.py

    - name: Verify files
      run: |
        echo "Generated files:"
        ls -la proxylist*.jdproxies
        if [ -f proxylist.jdproxies ]; then
          size=$(wc -c < proxylist.jdproxies)
          echo "Combined file size: $size bytes"
        fi

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: proxy-lists-${{ github.run_number }}
        path: proxylist*.jdproxies
        retention-days: 7

    - name: Commit and push
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git pull origin ${{ github.ref_name }}
        git add proxylist*.jdproxies
        if ! git diff --cached --quiet; then
          file_count=$(git diff --cached --name-only | wc -l)
          git commit -m "Update proxy lists - $(date '+%Y-%m-%d %H:%M UTC') [$file_count files]"
          git push origin ${{ github.ref_name }}
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
